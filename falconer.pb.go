// Code generated by protoc-gen-go. DO NOT EDIT.
// source: falconer.proto

/*
Package falconer is a generated protocol buffer package.

It is generated from these files:
	falconer.proto

It has these top-level messages:
	FindSpanRequest
	SpanBatch
	SpanResponse
	TraceRequest
*/
package falconer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import ssf "github.com/stripe/veneur/ssf"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FindSpanRequest struct {
	Name string            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Tags map[string]string `protobuf:"bytes,2,rep,name=tags" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *FindSpanRequest) Reset()                    { *m = FindSpanRequest{} }
func (m *FindSpanRequest) String() string            { return proto.CompactTextString(m) }
func (*FindSpanRequest) ProtoMessage()               {}
func (*FindSpanRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *FindSpanRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FindSpanRequest) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type SpanBatch struct {
	Spans []*ssf.SSFSpan `protobuf:"bytes,1,rep,name=spans" json:"spans,omitempty"`
}

func (m *SpanBatch) Reset()                    { *m = SpanBatch{} }
func (m *SpanBatch) String() string            { return proto.CompactTextString(m) }
func (*SpanBatch) ProtoMessage()               {}
func (*SpanBatch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SpanBatch) GetSpans() []*ssf.SSFSpan {
	if m != nil {
		return m.Spans
	}
	return nil
}

// This clearly needs something else in it. Likely some backpressure stuff.
type SpanResponse struct {
	Greeting string `protobuf:"bytes,1,opt,name=greeting" json:"greeting,omitempty"`
}

func (m *SpanResponse) Reset()                    { *m = SpanResponse{} }
func (m *SpanResponse) String() string            { return proto.CompactTextString(m) }
func (*SpanResponse) ProtoMessage()               {}
func (*SpanResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SpanResponse) GetGreeting() string {
	if m != nil {
		return m.Greeting
	}
	return ""
}

type TraceRequest struct {
	TraceID int64 `protobuf:"varint,1,opt,name=traceID" json:"traceID,omitempty"`
}

func (m *TraceRequest) Reset()                    { *m = TraceRequest{} }
func (m *TraceRequest) String() string            { return proto.CompactTextString(m) }
func (*TraceRequest) ProtoMessage()               {}
func (*TraceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *TraceRequest) GetTraceID() int64 {
	if m != nil {
		return m.TraceID
	}
	return 0
}

func init() {
	proto.RegisterType((*FindSpanRequest)(nil), "falconer.FindSpanRequest")
	proto.RegisterType((*SpanBatch)(nil), "falconer.SpanBatch")
	proto.RegisterType((*SpanResponse)(nil), "falconer.SpanResponse")
	proto.RegisterType((*TraceRequest)(nil), "falconer.TraceRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Falconer service

type FalconerClient interface {
	FindSpans(ctx context.Context, in *FindSpanRequest, opts ...grpc.CallOption) (Falconer_FindSpansClient, error)
	GetTrace(ctx context.Context, in *TraceRequest, opts ...grpc.CallOption) (Falconer_GetTraceClient, error)
	WatchSpans(ctx context.Context, in *FindSpanRequest, opts ...grpc.CallOption) (Falconer_WatchSpansClient, error)
}

type falconerClient struct {
	cc *grpc.ClientConn
}

func NewFalconerClient(cc *grpc.ClientConn) FalconerClient {
	return &falconerClient{cc}
}

func (c *falconerClient) FindSpans(ctx context.Context, in *FindSpanRequest, opts ...grpc.CallOption) (Falconer_FindSpansClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Falconer_serviceDesc.Streams[0], c.cc, "/falconer.Falconer/FindSpans", opts...)
	if err != nil {
		return nil, err
	}
	x := &falconerFindSpansClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Falconer_FindSpansClient interface {
	Recv() (*ssf.SSFSpan, error)
	grpc.ClientStream
}

type falconerFindSpansClient struct {
	grpc.ClientStream
}

func (x *falconerFindSpansClient) Recv() (*ssf.SSFSpan, error) {
	m := new(ssf.SSFSpan)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *falconerClient) GetTrace(ctx context.Context, in *TraceRequest, opts ...grpc.CallOption) (Falconer_GetTraceClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Falconer_serviceDesc.Streams[1], c.cc, "/falconer.Falconer/GetTrace", opts...)
	if err != nil {
		return nil, err
	}
	x := &falconerGetTraceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Falconer_GetTraceClient interface {
	Recv() (*ssf.SSFSpan, error)
	grpc.ClientStream
}

type falconerGetTraceClient struct {
	grpc.ClientStream
}

func (x *falconerGetTraceClient) Recv() (*ssf.SSFSpan, error) {
	m := new(ssf.SSFSpan)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *falconerClient) WatchSpans(ctx context.Context, in *FindSpanRequest, opts ...grpc.CallOption) (Falconer_WatchSpansClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Falconer_serviceDesc.Streams[2], c.cc, "/falconer.Falconer/WatchSpans", opts...)
	if err != nil {
		return nil, err
	}
	x := &falconerWatchSpansClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Falconer_WatchSpansClient interface {
	Recv() (*ssf.SSFSpan, error)
	grpc.ClientStream
}

type falconerWatchSpansClient struct {
	grpc.ClientStream
}

func (x *falconerWatchSpansClient) Recv() (*ssf.SSFSpan, error) {
	m := new(ssf.SSFSpan)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Falconer service

type FalconerServer interface {
	FindSpans(*FindSpanRequest, Falconer_FindSpansServer) error
	GetTrace(*TraceRequest, Falconer_GetTraceServer) error
	WatchSpans(*FindSpanRequest, Falconer_WatchSpansServer) error
}

func RegisterFalconerServer(s *grpc.Server, srv FalconerServer) {
	s.RegisterService(&_Falconer_serviceDesc, srv)
}

func _Falconer_FindSpans_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FindSpanRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FalconerServer).FindSpans(m, &falconerFindSpansServer{stream})
}

type Falconer_FindSpansServer interface {
	Send(*ssf.SSFSpan) error
	grpc.ServerStream
}

type falconerFindSpansServer struct {
	grpc.ServerStream
}

func (x *falconerFindSpansServer) Send(m *ssf.SSFSpan) error {
	return x.ServerStream.SendMsg(m)
}

func _Falconer_GetTrace_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TraceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FalconerServer).GetTrace(m, &falconerGetTraceServer{stream})
}

type Falconer_GetTraceServer interface {
	Send(*ssf.SSFSpan) error
	grpc.ServerStream
}

type falconerGetTraceServer struct {
	grpc.ServerStream
}

func (x *falconerGetTraceServer) Send(m *ssf.SSFSpan) error {
	return x.ServerStream.SendMsg(m)
}

func _Falconer_WatchSpans_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FindSpanRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FalconerServer).WatchSpans(m, &falconerWatchSpansServer{stream})
}

type Falconer_WatchSpansServer interface {
	Send(*ssf.SSFSpan) error
	grpc.ServerStream
}

type falconerWatchSpansServer struct {
	grpc.ServerStream
}

func (x *falconerWatchSpansServer) Send(m *ssf.SSFSpan) error {
	return x.ServerStream.SendMsg(m)
}

var _Falconer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "falconer.Falconer",
	HandlerType: (*FalconerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FindSpans",
			Handler:       _Falconer_FindSpans_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetTrace",
			Handler:       _Falconer_GetTrace_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchSpans",
			Handler:       _Falconer_WatchSpans_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "falconer.proto",
}

func init() { proto.RegisterFile("falconer.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 323 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0xcb, 0x4e, 0xf3, 0x30,
	0x10, 0x85, 0x7f, 0xf7, 0xf2, 0x93, 0x0c, 0x15, 0x20, 0x0b, 0xa1, 0x90, 0x55, 0x15, 0x36, 0x85,
	0x45, 0x82, 0x0a, 0x52, 0x0b, 0x4b, 0x04, 0x45, 0x6c, 0xd3, 0x4a, 0xac, 0xdd, 0x30, 0x4d, 0x23,
	0x5a, 0xc7, 0x78, 0x9c, 0x4a, 0x7d, 0x12, 0x9e, 0x84, 0xf7, 0x43, 0x71, 0x9a, 0x72, 0x11, 0x2c,
	0xd8, 0xcd, 0x19, 0xfb, 0xcc, 0x37, 0xc7, 0x86, 0xbd, 0x99, 0x58, 0x24, 0xb9, 0x44, 0x1d, 0x2a,
	0x9d, 0x9b, 0x9c, 0x3b, 0xb5, 0xf6, 0x4f, 0xd3, 0xcc, 0xcc, 0x8b, 0x69, 0x98, 0xe4, 0xcb, 0x88,
	0x8c, 0xce, 0x14, 0x46, 0x2b, 0x94, 0x58, 0xe8, 0x88, 0x68, 0x16, 0x91, 0x58, 0xaa, 0x05, 0x56,
	0xa6, 0xe0, 0x95, 0xc1, 0xfe, 0x28, 0x93, 0x4f, 0x63, 0x25, 0x64, 0x8c, 0x2f, 0x05, 0x92, 0xe1,
	0x1c, 0x5a, 0x52, 0x2c, 0xd1, 0x63, 0x5d, 0xd6, 0x73, 0x63, 0x5b, 0xf3, 0x01, 0xb4, 0x8c, 0x48,
	0xc9, 0x6b, 0x74, 0x9b, 0xbd, 0xdd, 0xfe, 0x49, 0xb8, 0x65, 0x7f, 0x33, 0x87, 0x13, 0x91, 0xd2,
	0x9d, 0x34, 0x7a, 0x1d, 0x5b, 0x83, 0x3f, 0x00, 0x77, 0xdb, 0xe2, 0x07, 0xd0, 0x7c, 0xc6, 0xf5,
	0x66, 0x70, 0x59, 0xf2, 0x43, 0x68, 0xaf, 0xc4, 0xa2, 0x40, 0xaf, 0x61, 0x7b, 0x95, 0xb8, 0x6e,
	0x0c, 0x59, 0x10, 0x81, 0x5b, 0xce, 0xbd, 0x11, 0x26, 0x99, 0xf3, 0x00, 0xda, 0xa4, 0x84, 0x24,
	0x8f, 0x59, 0x7e, 0x27, 0x24, 0x9a, 0x85, 0xe3, 0xf1, 0xc8, 0x92, 0xab, 0xa3, 0xe0, 0x0c, 0x3a,
	0xd5, 0x22, 0xa4, 0x72, 0x49, 0xc8, 0x7d, 0x70, 0x52, 0x8d, 0x68, 0x32, 0x99, 0x6e, 0x88, 0x5b,
	0x1d, 0xf4, 0xa0, 0x33, 0xd1, 0x22, 0xc1, 0x3a, 0xb2, 0x07, 0x3b, 0xa6, 0xd4, 0x0f, 0xb7, 0xf6,
	0x6a, 0x33, 0xae, 0x65, 0xff, 0x8d, 0x81, 0x33, 0xda, 0x84, 0xe5, 0x43, 0x70, 0xeb, 0xbc, 0xc4,
	0x8f, 0x7f, 0x7d, 0x04, 0xff, 0xcb, 0x7e, 0xc1, 0xbf, 0x73, 0xc6, 0x2f, 0xc1, 0xb9, 0x47, 0x63,
	0x99, 0xfc, 0xe8, 0xc3, 0xf8, 0x79, 0x89, 0x1f, 0x5c, 0x57, 0x00, 0x8f, 0x65, 0xfe, 0xbf, 0x03,
	0xa7, 0xff, 0xed, 0xff, 0x5e, 0xbc, 0x07, 0x00, 0x00, 0xff, 0xff, 0xe6, 0x8b, 0x77, 0x74, 0x26,
	0x02, 0x00, 0x00,
}
