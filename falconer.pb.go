// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: falconer.proto

/*
	Package falconer is a generated protocol buffer package.

	It is generated from these files:
		falconer.proto

	It has these top-level messages:
		FindSpanRequest
		SpanBatch
		SpanResponse
		TraceRequest
*/
package falconer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import ssf "github.com/stripe/veneur/ssf"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FindSpanRequest struct {
	Name string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Tags map[string]string `protobuf:"bytes,2,rep,name=tags" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *FindSpanRequest) Reset()                    { *m = FindSpanRequest{} }
func (m *FindSpanRequest) String() string            { return proto.CompactTextString(m) }
func (*FindSpanRequest) ProtoMessage()               {}
func (*FindSpanRequest) Descriptor() ([]byte, []int) { return fileDescriptorFalconer, []int{0} }

func (m *FindSpanRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FindSpanRequest) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type SpanBatch struct {
	Spans []*ssf.SSFSpan `protobuf:"bytes,1,rep,name=spans" json:"spans,omitempty"`
}

func (m *SpanBatch) Reset()                    { *m = SpanBatch{} }
func (m *SpanBatch) String() string            { return proto.CompactTextString(m) }
func (*SpanBatch) ProtoMessage()               {}
func (*SpanBatch) Descriptor() ([]byte, []int) { return fileDescriptorFalconer, []int{1} }

func (m *SpanBatch) GetSpans() []*ssf.SSFSpan {
	if m != nil {
		return m.Spans
	}
	return nil
}

// This clearly needs something else in it. Likely some backpressure stuff.
type SpanResponse struct {
	Greeting string `protobuf:"bytes,1,opt,name=greeting,proto3" json:"greeting,omitempty"`
}

func (m *SpanResponse) Reset()                    { *m = SpanResponse{} }
func (m *SpanResponse) String() string            { return proto.CompactTextString(m) }
func (*SpanResponse) ProtoMessage()               {}
func (*SpanResponse) Descriptor() ([]byte, []int) { return fileDescriptorFalconer, []int{2} }

func (m *SpanResponse) GetGreeting() string {
	if m != nil {
		return m.Greeting
	}
	return ""
}

type TraceRequest struct {
	TraceID int64 `protobuf:"varint,1,opt,name=traceID,proto3" json:"traceID,omitempty"`
}

func (m *TraceRequest) Reset()                    { *m = TraceRequest{} }
func (m *TraceRequest) String() string            { return proto.CompactTextString(m) }
func (*TraceRequest) ProtoMessage()               {}
func (*TraceRequest) Descriptor() ([]byte, []int) { return fileDescriptorFalconer, []int{3} }

func (m *TraceRequest) GetTraceID() int64 {
	if m != nil {
		return m.TraceID
	}
	return 0
}

func init() {
	proto.RegisterType((*FindSpanRequest)(nil), "falconer.FindSpanRequest")
	proto.RegisterType((*SpanBatch)(nil), "falconer.SpanBatch")
	proto.RegisterType((*SpanResponse)(nil), "falconer.SpanResponse")
	proto.RegisterType((*TraceRequest)(nil), "falconer.TraceRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Falconer service

type FalconerClient interface {
	FindSpans(ctx context.Context, in *FindSpanRequest, opts ...grpc.CallOption) (Falconer_FindSpansClient, error)
	GetTrace(ctx context.Context, in *TraceRequest, opts ...grpc.CallOption) (Falconer_GetTraceClient, error)
	WatchSpans(ctx context.Context, in *FindSpanRequest, opts ...grpc.CallOption) (Falconer_WatchSpansClient, error)
}

type falconerClient struct {
	cc *grpc.ClientConn
}

func NewFalconerClient(cc *grpc.ClientConn) FalconerClient {
	return &falconerClient{cc}
}

func (c *falconerClient) FindSpans(ctx context.Context, in *FindSpanRequest, opts ...grpc.CallOption) (Falconer_FindSpansClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Falconer_serviceDesc.Streams[0], c.cc, "/falconer.Falconer/FindSpans", opts...)
	if err != nil {
		return nil, err
	}
	x := &falconerFindSpansClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Falconer_FindSpansClient interface {
	Recv() (*ssf.SSFSpan, error)
	grpc.ClientStream
}

type falconerFindSpansClient struct {
	grpc.ClientStream
}

func (x *falconerFindSpansClient) Recv() (*ssf.SSFSpan, error) {
	m := new(ssf.SSFSpan)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *falconerClient) GetTrace(ctx context.Context, in *TraceRequest, opts ...grpc.CallOption) (Falconer_GetTraceClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Falconer_serviceDesc.Streams[1], c.cc, "/falconer.Falconer/GetTrace", opts...)
	if err != nil {
		return nil, err
	}
	x := &falconerGetTraceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Falconer_GetTraceClient interface {
	Recv() (*ssf.SSFSpan, error)
	grpc.ClientStream
}

type falconerGetTraceClient struct {
	grpc.ClientStream
}

func (x *falconerGetTraceClient) Recv() (*ssf.SSFSpan, error) {
	m := new(ssf.SSFSpan)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *falconerClient) WatchSpans(ctx context.Context, in *FindSpanRequest, opts ...grpc.CallOption) (Falconer_WatchSpansClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Falconer_serviceDesc.Streams[2], c.cc, "/falconer.Falconer/WatchSpans", opts...)
	if err != nil {
		return nil, err
	}
	x := &falconerWatchSpansClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Falconer_WatchSpansClient interface {
	Recv() (*ssf.SSFSpan, error)
	grpc.ClientStream
}

type falconerWatchSpansClient struct {
	grpc.ClientStream
}

func (x *falconerWatchSpansClient) Recv() (*ssf.SSFSpan, error) {
	m := new(ssf.SSFSpan)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Falconer service

type FalconerServer interface {
	FindSpans(*FindSpanRequest, Falconer_FindSpansServer) error
	GetTrace(*TraceRequest, Falconer_GetTraceServer) error
	WatchSpans(*FindSpanRequest, Falconer_WatchSpansServer) error
}

func RegisterFalconerServer(s *grpc.Server, srv FalconerServer) {
	s.RegisterService(&_Falconer_serviceDesc, srv)
}

func _Falconer_FindSpans_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FindSpanRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FalconerServer).FindSpans(m, &falconerFindSpansServer{stream})
}

type Falconer_FindSpansServer interface {
	Send(*ssf.SSFSpan) error
	grpc.ServerStream
}

type falconerFindSpansServer struct {
	grpc.ServerStream
}

func (x *falconerFindSpansServer) Send(m *ssf.SSFSpan) error {
	return x.ServerStream.SendMsg(m)
}

func _Falconer_GetTrace_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TraceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FalconerServer).GetTrace(m, &falconerGetTraceServer{stream})
}

type Falconer_GetTraceServer interface {
	Send(*ssf.SSFSpan) error
	grpc.ServerStream
}

type falconerGetTraceServer struct {
	grpc.ServerStream
}

func (x *falconerGetTraceServer) Send(m *ssf.SSFSpan) error {
	return x.ServerStream.SendMsg(m)
}

func _Falconer_WatchSpans_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FindSpanRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FalconerServer).WatchSpans(m, &falconerWatchSpansServer{stream})
}

type Falconer_WatchSpansServer interface {
	Send(*ssf.SSFSpan) error
	grpc.ServerStream
}

type falconerWatchSpansServer struct {
	grpc.ServerStream
}

func (x *falconerWatchSpansServer) Send(m *ssf.SSFSpan) error {
	return x.ServerStream.SendMsg(m)
}

var _Falconer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "falconer.Falconer",
	HandlerType: (*FalconerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FindSpans",
			Handler:       _Falconer_FindSpans_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetTrace",
			Handler:       _Falconer_GetTrace_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchSpans",
			Handler:       _Falconer_WatchSpans_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "falconer.proto",
}

func (m *FindSpanRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FindSpanRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFalconer(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Tags) > 0 {
		for k, _ := range m.Tags {
			dAtA[i] = 0x12
			i++
			v := m.Tags[k]
			mapSize := 1 + len(k) + sovFalconer(uint64(len(k))) + 1 + len(v) + sovFalconer(uint64(len(v)))
			i = encodeVarintFalconer(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintFalconer(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintFalconer(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func (m *SpanBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpanBatch) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Spans) > 0 {
		for _, msg := range m.Spans {
			dAtA[i] = 0xa
			i++
			i = encodeVarintFalconer(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SpanResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpanResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Greeting) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFalconer(dAtA, i, uint64(len(m.Greeting)))
		i += copy(dAtA[i:], m.Greeting)
	}
	return i, nil
}

func (m *TraceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TraceRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TraceID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFalconer(dAtA, i, uint64(m.TraceID))
	}
	return i, nil
}

func encodeVarintFalconer(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *FindSpanRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFalconer(uint64(l))
	}
	if len(m.Tags) > 0 {
		for k, v := range m.Tags {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovFalconer(uint64(len(k))) + 1 + len(v) + sovFalconer(uint64(len(v)))
			n += mapEntrySize + 1 + sovFalconer(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *SpanBatch) Size() (n int) {
	var l int
	_ = l
	if len(m.Spans) > 0 {
		for _, e := range m.Spans {
			l = e.Size()
			n += 1 + l + sovFalconer(uint64(l))
		}
	}
	return n
}

func (m *SpanResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Greeting)
	if l > 0 {
		n += 1 + l + sovFalconer(uint64(l))
	}
	return n
}

func (m *TraceRequest) Size() (n int) {
	var l int
	_ = l
	if m.TraceID != 0 {
		n += 1 + sovFalconer(uint64(m.TraceID))
	}
	return n
}

func sovFalconer(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozFalconer(x uint64) (n int) {
	return sovFalconer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FindSpanRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFalconer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FindSpanRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FindSpanRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFalconer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFalconer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFalconer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFalconer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tags == nil {
				m.Tags = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFalconer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFalconer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthFalconer
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFalconer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthFalconer
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFalconer(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthFalconer
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Tags[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFalconer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFalconer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpanBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFalconer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpanBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpanBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spans", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFalconer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFalconer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Spans = append(m.Spans, &ssf.SSFSpan{})
			if err := m.Spans[len(m.Spans)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFalconer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFalconer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpanResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFalconer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpanResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpanResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Greeting", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFalconer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFalconer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Greeting = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFalconer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFalconer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TraceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFalconer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TraceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TraceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceID", wireType)
			}
			m.TraceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFalconer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TraceID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFalconer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFalconer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFalconer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFalconer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFalconer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFalconer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthFalconer
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowFalconer
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipFalconer(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthFalconer = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFalconer   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("falconer.proto", fileDescriptorFalconer) }

var fileDescriptorFalconer = []byte{
	// 349 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0xcf, 0x4e, 0xe3, 0x30,
	0x10, 0xc6, 0xeb, 0xfe, 0xd9, 0x4d, 0x66, 0xab, 0xdd, 0xca, 0x5a, 0xa1, 0x90, 0x43, 0x54, 0x85,
	0x4b, 0xe1, 0x90, 0xa0, 0x82, 0xd4, 0xc2, 0xb1, 0x82, 0x22, 0xae, 0x69, 0x25, 0xce, 0x6e, 0x98,
	0xa6, 0x11, 0xad, 0x13, 0x6c, 0xa7, 0x52, 0x9f, 0x04, 0x5e, 0x84, 0x77, 0xe0, 0xc8, 0x23, 0xa0,
	0xf2, 0x22, 0x28, 0x4e, 0x53, 0xfe, 0x08, 0x0e, 0xdc, 0xe6, 0x1b, 0xfb, 0x9b, 0xdf, 0x7c, 0x36,
	0xfc, 0x9d, 0xb2, 0x79, 0x98, 0x70, 0x14, 0x5e, 0x2a, 0x12, 0x95, 0x50, 0xa3, 0xd4, 0xf6, 0x7e,
	0x14, 0xab, 0x59, 0x36, 0xf1, 0xc2, 0x64, 0xe1, 0x4b, 0x25, 0xe2, 0x14, 0xfd, 0x25, 0x72, 0xcc,
	0x84, 0x2f, 0xe5, 0xd4, 0x97, 0x6c, 0x91, 0xce, 0xb1, 0x30, 0xb9, 0x77, 0x04, 0xfe, 0x0d, 0x63,
	0x7e, 0x3d, 0x4a, 0x19, 0x0f, 0xf0, 0x36, 0x43, 0xa9, 0x28, 0x85, 0x3a, 0x67, 0x0b, 0xb4, 0x48,
	0x9b, 0x74, 0xcc, 0x40, 0xd7, 0xb4, 0x07, 0x75, 0xc5, 0x22, 0x69, 0x55, 0xdb, 0xb5, 0xce, 0x9f,
	0xee, 0x9e, 0xb7, 0x65, 0x7f, 0x32, 0x7b, 0x63, 0x16, 0xc9, 0x73, 0xae, 0xc4, 0x2a, 0xd0, 0x06,
	0xbb, 0x07, 0xe6, 0xb6, 0x45, 0x5b, 0x50, 0xbb, 0xc1, 0xd5, 0x66, 0x70, 0x5e, 0xd2, 0xff, 0xd0,
	0x58, 0xb2, 0x79, 0x86, 0x56, 0x55, 0xf7, 0x0a, 0x71, 0x5a, 0xed, 0x13, 0xd7, 0x07, 0x33, 0x9f,
	0x3b, 0x60, 0x2a, 0x9c, 0x51, 0x17, 0x1a, 0x32, 0x65, 0x5c, 0x5a, 0x44, 0xf3, 0x9b, 0x9e, 0x94,
	0x53, 0x6f, 0x34, 0x1a, 0x6a, 0x72, 0x71, 0xe4, 0x1e, 0x40, 0xb3, 0x58, 0x44, 0xa6, 0x09, 0x97,
	0x48, 0x6d, 0x30, 0x22, 0x81, 0xa8, 0x62, 0x1e, 0x6d, 0x88, 0x5b, 0xed, 0x76, 0xa0, 0x39, 0x16,
	0x2c, 0xc4, 0x32, 0xb2, 0x05, 0xbf, 0x55, 0xae, 0x2f, 0xcf, 0xf4, 0xd5, 0x5a, 0x50, 0xca, 0xee,
	0x03, 0x01, 0x63, 0xb8, 0x09, 0x4b, 0xfb, 0x60, 0x96, 0x79, 0x25, 0xdd, 0xfd, 0xf6, 0x11, 0xec,
	0x0f, 0xfb, 0xb9, 0x95, 0x43, 0x42, 0x8f, 0xc1, 0xb8, 0x40, 0xa5, 0x99, 0x74, 0xe7, 0xcd, 0xf8,
	0x7e, 0x89, 0x2f, 0x5c, 0x27, 0x00, 0x57, 0x79, 0xfe, 0x9f, 0x03, 0x07, 0xad, 0xc7, 0xb5, 0x43,
	0x9e, 0xd6, 0x0e, 0x79, 0x5e, 0x3b, 0xe4, 0xfe, 0xc5, 0xa9, 0x4c, 0x7e, 0xe9, 0x1f, 0x3f, 0x7a,
	0x0d, 0x00, 0x00, 0xff, 0xff, 0xc9, 0x9b, 0xd4, 0x76, 0x38, 0x02, 0x00, 0x00,
}
