// Code generated by protoc-gen-go. DO NOT EDIT.
// source: jacquard.proto

/*
Package jacquard is a generated protocol buffer package.

It is generated from these files:
	jacquard.proto

It has these top-level messages:
	SpanResponse
*/
package jacquard

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import ssf "github.com/stripe/veneur/ssf"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SpanResponse struct {
	Greeting string `protobuf:"bytes,1,opt,name=greeting" json:"greeting,omitempty"`
}

func (m *SpanResponse) Reset()                    { *m = SpanResponse{} }
func (m *SpanResponse) String() string            { return proto.CompactTextString(m) }
func (*SpanResponse) ProtoMessage()               {}
func (*SpanResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SpanResponse) GetGreeting() string {
	if m != nil {
		return m.Greeting
	}
	return ""
}

func init() {
	proto.RegisterType((*SpanResponse)(nil), "jacquard.SpanResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Jacquard service

type JacquardClient interface {
	BidiSpans(ctx context.Context, opts ...grpc.CallOption) (Jacquard_BidiSpansClient, error)
}

type jacquardClient struct {
	cc *grpc.ClientConn
}

func NewJacquardClient(cc *grpc.ClientConn) JacquardClient {
	return &jacquardClient{cc}
}

func (c *jacquardClient) BidiSpans(ctx context.Context, opts ...grpc.CallOption) (Jacquard_BidiSpansClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Jacquard_serviceDesc.Streams[0], c.cc, "/jacquard.Jacquard/BidiSpans", opts...)
	if err != nil {
		return nil, err
	}
	x := &jacquardBidiSpansClient{stream}
	return x, nil
}

type Jacquard_BidiSpansClient interface {
	Send(*ssf.SSFSpan) error
	CloseAndRecv() (*SpanResponse, error)
	grpc.ClientStream
}

type jacquardBidiSpansClient struct {
	grpc.ClientStream
}

func (x *jacquardBidiSpansClient) Send(m *ssf.SSFSpan) error {
	return x.ClientStream.SendMsg(m)
}

func (x *jacquardBidiSpansClient) CloseAndRecv() (*SpanResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SpanResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Jacquard service

type JacquardServer interface {
	BidiSpans(Jacquard_BidiSpansServer) error
}

func RegisterJacquardServer(s *grpc.Server, srv JacquardServer) {
	s.RegisterService(&_Jacquard_serviceDesc, srv)
}

func _Jacquard_BidiSpans_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(JacquardServer).BidiSpans(&jacquardBidiSpansServer{stream})
}

type Jacquard_BidiSpansServer interface {
	SendAndClose(*SpanResponse) error
	Recv() (*ssf.SSFSpan, error)
	grpc.ServerStream
}

type jacquardBidiSpansServer struct {
	grpc.ServerStream
}

func (x *jacquardBidiSpansServer) SendAndClose(m *SpanResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *jacquardBidiSpansServer) Recv() (*ssf.SSFSpan, error) {
	m := new(ssf.SSFSpan)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Jacquard_serviceDesc = grpc.ServiceDesc{
	ServiceName: "jacquard.Jacquard",
	HandlerType: (*JacquardServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BidiSpans",
			Handler:       _Jacquard_BidiSpans_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "jacquard.proto",
}

func init() { proto.RegisterFile("jacquard.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 166 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcb, 0x4a, 0x4c, 0x2e,
	0x2c, 0x4d, 0x2c, 0x4a, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x80, 0xf1, 0xa5, 0x34,
	0xd3, 0x33, 0x4b, 0x32, 0x4a, 0x93, 0xf4, 0x92, 0xf3, 0x73, 0xf5, 0x8b, 0x4b, 0x8a, 0x32, 0x0b,
	0x52, 0xf5, 0xcb, 0x52, 0xf3, 0x52, 0x4b, 0x8b, 0xf4, 0x8b, 0x8b, 0xd3, 0xf4, 0x8b, 0x13, 0x73,
	0x0b, 0x72, 0x52, 0x21, 0x9a, 0x94, 0xb4, 0xb8, 0x78, 0x82, 0x0b, 0x12, 0xf3, 0x82, 0x52, 0x8b,
	0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x85, 0xa4, 0xb8, 0x38, 0xd2, 0x8b, 0x52, 0x53, 0x4b, 0x32, 0xf3,
	0xd2, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0xe0, 0x7c, 0x23, 0x47, 0x2e, 0x0e, 0x2f, 0xa8,
	0x15, 0x42, 0xa6, 0x5c, 0x9c, 0x4e, 0x99, 0x29, 0x99, 0x20, 0xbd, 0xc5, 0x42, 0x3c, 0x7a, 0xc5,
	0xc5, 0x69, 0x7a, 0xc1, 0xc1, 0x6e, 0x20, 0xae, 0x94, 0x98, 0x1e, 0xdc, 0x61, 0xc8, 0x46, 0x2b,
	0x31, 0x68, 0x30, 0x26, 0xb1, 0x81, 0x6d, 0x35, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x53, 0xfa,
	0x13, 0x08, 0xbc, 0x00, 0x00, 0x00,
}
